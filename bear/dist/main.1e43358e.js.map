{"version":3,"sources":["src/main.js"],"names":["fileInput","document","querySelector","beforeTable","createElement","border","cellSpacing","style","marginTop","display","classList","add","afterTable","checkbox","exportResultTableBtn","renderTable","xlsxReader","Strings","forEach","el","t","beforeTr","beforeTd","textContent","appendChild","splitedStr","split","ru","en","word","test","length","push","ruPhrase","join","enPhrase","tr","ruTd","enTd","body","addEventListener","e","allTables","querySelectorAll","table","remove","files","target","file","fileReader","FileReader","onload","data","result","xlsxReaderResult","XLSX","read","type","readAsBinaryString","checked","wb","utils","table_to_book","sheet","writeFile"],"mappings":"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","file":"main.1e43358e.js","sourceRoot":"..","sourcesContent":["const fileInput = document.querySelector(\".file\");\n\nconst beforeTable = document.createElement(\"table\");\nbeforeTable.border = 1;\nbeforeTable.cellSpacing = 0;\nbeforeTable.style.marginTop = \"20px\";\nbeforeTable.style.display = \"none\";\nbeforeTable.classList.add(\"before-table\");\n\nconst afterTable = document.createElement(\"table\");\nafterTable.border = 1;\nafterTable.cellSpacing = 0;\nafterTable.style.marginTop = \"20px\";\n\nconst checkbox = document.querySelector(\".checkbox\");\nconst exportResultTableBtn = document.querySelector(\".export\");\n\nfunction renderTable(xlsxReader) {\n  xlsxReader.Strings.forEach((el) => {\n    if (el.t !== \"Link\" && el.t !== \"\") {\n      const beforeTr = document.createElement(\"tr\");\n      const beforeTd = document.createElement(\"td\");\n      beforeTd.textContent = el.t;\n      beforeTr.appendChild(beforeTd);\n      beforeTable.appendChild(beforeTr);\n\n      const splitedStr = el.t.split(\" \");\n      const ru = [];\n      const en = [];\n      splitedStr.forEach((word) => {\n        if (/[A-z]/.test(word) || (en.length > 0 && /\\d/.test(word))) {\n          en.push(word);\n        } else {\n          ru.push(word);\n        }\n      });\n      const ruPhrase = ru.join(\" \");\n      const enPhrase = en.join(\" \");\n      const tr = document.createElement(\"tr\");\n      const ruTd = document.createElement(\"td\");\n      const enTd = document.createElement(\"td\");\n      ruTd.textContent = ruPhrase;\n      enTd.textContent = enPhrase;\n      tr.appendChild(ruTd);\n      tr.appendChild(enTd);\n      afterTable.appendChild(tr);\n    }\n  });\n\n  document.body.appendChild(beforeTable);\n  document.body.appendChild(afterTable);\n  exportResultTableBtn.style.display = \"block\";\n}\n\nfileInput.addEventListener(\"change\", (e) => {\n  const allTables = document.querySelectorAll(\"table\");\n  allTables.forEach((table) => table.remove());\n\n  const files = e.target.files;\n  if (files[0]) {\n    const file = files[0];\n    const fileReader = new FileReader();\n    fileReader.onload = (e) => {\n      const data = e.target.result;\n      const xlsxReaderResult = XLSX.read(data, { type: \"binary\" });\n      renderTable(xlsxReaderResult);\n    };\n\n    fileReader.readAsBinaryString(file);\n  }\n});\n\ncheckbox.addEventListener(\"change\", (e) => {\n  if (e.target.checked) {\n    beforeTable.style.display = \"table\";\n  } else {\n    beforeTable.style.display = \"none\";\n  }\n});\n\nexportResultTableBtn.addEventListener(\"click\", () => {\n  var wb = XLSX.utils.table_to_book(afterTable, { sheet: \"export\" });\n  XLSX.writeFile(wb, \"export.xlsx\");\n});\n"]}